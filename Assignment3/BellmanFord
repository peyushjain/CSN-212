
using namespace std;
#include<iostream>
#include<time.h>
#define inf 9999999

struct edge{
  int src,dest,weight;
};
void BellmanFord(edge arr[],int v,int e,int source){
   int dist[v];
   for(int i=0;i<v;i++){
        dist[i]=inf;
    }
    dist[source]=0;
   for(int i=0;i<v;i++){
        for(int j=0;j<e;j++){
            int tmp=arr[j].src;
             int tmp1=arr[j].dest;
             int wt=arr[j].weight;
          if(dist[tmp]!=inf && dist[tmp1]>dist[tmp]+wt){
          // cout<<tmp<<" "<<tmp1<<" "<<wt<<endl;
           dist[tmp1]=dist[tmp]+wt;
         }
        }
    }
    
   cout<<"source vertex is "<<source<<endl;
    // printing shortest dis
   for(int i=0;i<v;i++){
        cout<<"distance from source of "<<i<<" from source is: "<<dist[i]<<endl;
    }      
}
int main(){
    
	int v=5;
    int e=8;
    
	// considering one particular input
	edge Edge[8];
    Edge[0].src = 0;
    Edge[0].dest = 1;
    Edge[0].weight = -1;
 
    // add edge 0-2 
    Edge[1].src = 0;
    Edge[1].dest = 2;
    Edge[1].weight = 4;
 
    // add edge 1-2 
    Edge[2].src = 1;
    Edge[2].dest = 2;
    Edge[2].weight = 3;
 
    // add edge 1-3 
    Edge[3].src = 1;
    Edge[3].dest = 3;
    Edge[3].weight = 2;
 
    // add edge 1-4 
    Edge[4].src = 1;
    Edge[4].dest = 4;
    Edge[4].weight = 2;
 
    // add edge 3-2 
    Edge[5].src = 3;
    Edge[5].dest = 2;
    Edge[5].weight = 5;
 
    // add edge 3-1 
    Edge[6].src = 3;
    Edge[6].dest = 1;
    Edge[6].weight = 1;
 
    // add edge 4-3 
    Edge[7].src = 4;
    Edge[7].dest = 3;
    Edge[7].weight = -3;
 
    // 0th vertex is set as source
	BellmanFord(Edge,v,e,0);
	
    return 0;
}
