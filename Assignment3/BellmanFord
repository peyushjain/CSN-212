using namespace std;
#include<bits/stdc++.h>
#define inf 9999999

const int max_vertices=100;
const int max_edges=10000;
const int max_weight=10;

struct edge{
  int src,dest,weight;
};

edge Edge[max_edges];

void BellmanFord(int v,int e,int source){
   
   int dist[v];
   for(int i=0;i<v;i++){
        dist[i]=inf;
   }
   
   dist[source]=0;
   
   int a,b,wt;
   for(int i=0;i<v;i++){
        for(int j=0;j<e;j++){
        	
            a=Edge[j].src;
            b=Edge[j].dest;
            wt=Edge[j].weight;
          
		  if(dist[a]!=inf && dist[b]>dist[a]+wt) dist[b]=dist[a]+wt;
         
        }
    }
    
   cout<<"source vertex is "<<source<<endl;
    
	// printing shortest dist
   for(int i=0;i<v;i++){
        if(dist[i]>=inf) cout<<"cannot be reached from source"<<endl;
		else cout<<"distance from source of "<<i<<" from source is: "<<dist[i]<<endl;
    }      
}
int main(){
    
	int v=100;
	srand (time(0));
    int e= rand()%3000 + 50;  // generating random number of edges
    
    //cout<<e<<endl;
    // generating random weights and edges
	for(int i=0;i<e;i++){
    	int a=rand()%v;
    	int b=rand()%v;
    	if(a!=b){
    		Edge[i].src=a;
    		Edge[i].dest=b;
    		Edge[i].weight= rand()%max_weight;
		}
		
		else i--;
	}
    // 0th vertex is set as source
	BellmanFord(v,e,0);
	
    return 0;
}
